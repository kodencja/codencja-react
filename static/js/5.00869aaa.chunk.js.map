{"version":3,"sources":["img/signs3code2.jpg","componentsHook/BrickBoxes.jsx"],"names":["titles","BrickBoxes","onState","onDispatch","onRef","onTransEnd","bricksRef","useRef","arrLenght","n","rowNo","intervalTime","noOfAllBoxes","bricksInRow","useState","bricks","setBricks","mobileMozSet","setMobileMozSet","boxIntervalIn","boxIntervalOut","noOfColsNo","noOfRowsNo","boxAnimTimeNo","ifMobileOrMoz","boxesArrNo","useEffect","length","type","value","require","current","createBoxes","setTimeout","setInterval","randomBoxAppearOrDisappear","clearInterval","addToBricksRef","el","undefined","includes","push","startOrEnd","number","randomWithoutRepeating","box","filter","classList","contains","remove","add","style","backgroundImage","bgrStartPhoto","boxDisappear","boxWidth","offsetWidth","boxHeight","offsetHeight","transform","backgroundColor","opacity","display","randomNo","i","randomInd","Math","floor","random","splice","brickBoxes","ind","map","rowN","resultTitle","word","p","className","spans","e","j","chooseTitle","ref","React","memo"],"mappings":"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","file":"static/js/5.00869aaa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/signs3code2.16f2f53e.jpg\";","import React, { useState, useRef, useEffect } from \"react\";\r\nimport bgrStartPhoto from \"../img/signs3code2.jpg\";\r\n\r\nconst titles = [\r\n  [\"import\\u00A0\", \"\\u00A0Knowledge\", \"\\u00A0from\\u00A0\", \"'learning'\"],\r\n  [\"import\\u00A0\", \"Success\", \"\\u00A0from\\u00A0\", \"'work'\", \";\"],\r\n  [\"while\", \"(\\u00A0!Success\", \"(Knowledge)\", \")\\u00A0{\"],\r\n  [\"import\\u00A0\", \"Creativity\", \"\\u00A0from\\u00A0\", \"'imagination'\"],\r\n  [\"import\\u00A0\", \"Coffee\", \"\\u00A0from\\u00A0\", \"'farmers'\"],\r\n  [\"drink\", \"(Coffee);\"],\r\n  [\"Success\", \"(Creativity);\"],\r\n  [\"};\"],\r\n];\r\n\r\nfunction BrickBoxes({ onState, onDispatch, onRef, onTransEnd }) {\r\n  const bricksRef = useRef([]);\r\n  const arrLenght = useRef();\r\n  const n = useRef(-1);\r\n  const rowNo = useRef(0);\r\n  const intervalTime = useRef(60);\r\n\r\n  const noOfAllBoxes = useRef(0);\r\n  const bricksInRow = useRef([]);\r\n  const [bricks, setBricks] = useState([]);\r\n  const [mobileMozSet, setMobileMozSet] = useState(false);\r\n\r\n  const boxIntervalIn = useRef();\r\n  const boxIntervalOut = useRef();\r\n\r\n  const { noOfColsNo, noOfRowsNo, boxAnimTimeNo, ifMobileOrMoz, boxesArrNo } =\r\n    onState;\r\n\r\n  //  console.log(\"BrickBoxes Comp. rendered!\");\r\n\r\n  useEffect(() => {\r\n    if (boxesArrNo.length > 0) {\r\n      if (noOfColsNo > 10) {\r\n        onDispatch({\r\n          type: \"boxAnimTimeNo\",\r\n          value: boxAnimTimeNo + 1500,\r\n        });\r\n        // console.log(\"css/curtail.css\");\r\n        require(\"../css/curtain.css\");\r\n      } else {\r\n        // console.log(\"css/curtailMoz.css\");\r\n        onDispatch({ type: \"ifMobileOrMoz\", value: true });\r\n        require(\"../css/curtainMoz.css\");\r\n      }\r\n      noOfAllBoxes.current = noOfColsNo * noOfRowsNo;\r\n      setMobileMozSet(true);\r\n    }\r\n  }, [boxesArrNo]);\r\n\r\n  useEffect(() => {\r\n    if (mobileMozSet) {\r\n      createBoxes();\r\n    }\r\n  }, [mobileMozSet]);\r\n\r\n  useEffect(() => {\r\n    if (bricks.length > 0) {\r\n      setTimeout(() => {\r\n        boxIntervalIn.current = setInterval(() => {\r\n          randomBoxAppearOrDisappear(\"start\");\r\n        }, intervalTime.current);\r\n      }, 1000);\r\n    }\r\n    // clean up function\r\n    return () => {\r\n      clearInterval(boxIntervalIn.current);\r\n    };\r\n  }, [bricks]);\r\n\r\n  // add brick-box to useREF array\r\n  const addToBricksRef = (el) => {\r\n    if (el && el !== undefined && !bricksRef.current.includes(el)) {\r\n      bricksRef.current.push(el);\r\n    }\r\n  };\r\n\r\n  // function responsible for appearing or disappearing a random box\r\n  const randomBoxAppearOrDisappear = (startOrEnd) => {\r\n    // choose a random box number without repeating\r\n    const number = randomWithoutRepeating();\r\n    const box = bricksRef.current.filter((el) => {\r\n      return el.classList.contains(`box-${number}`);\r\n    });\r\n\r\n    // handle each brick-box appearing\r\n    if (number > -1 && startOrEnd === \"start\") {\r\n      if (ifMobileOrMoz) {\r\n        box[0].classList.remove(\"boxAnimRev\");\r\n        box[0].classList.add(\"boxAnimMoz\");\r\n      } else {\r\n        box[0].classList.add(\"boxAnim\");\r\n        box[0].style.backgroundImage = `url(${bgrStartPhoto})`;\r\n      }\r\n    }\r\n\r\n    // call box disappearing interval\r\n    else if (number <= -1 && startOrEnd === \"start\") {\r\n      setTimeout(() => {\r\n        noOfAllBoxes.current = noOfColsNo * noOfRowsNo;\r\n        n.current = -1;\r\n        rowNo.current = 0;\r\n        boxDisappear();\r\n      }, 4000);\r\n    }\r\n\r\n    // handle box disappearing one by one\r\n    else if (number > -1 && startOrEnd === \"end\") {\r\n      if (ifMobileOrMoz) {\r\n        // console.log(\"ifMobileOrMoz is true\");\r\n        box[0].classList.remove(\"boxAnimMoz\");\r\n        box[0].classList.add(\"boxAnimRev\");\r\n      } else {\r\n        // console.log(\"ifMobileOrMoz is false\");\r\n        box[0].classList.remove(\"boxAnim\");\r\n        const boxWidth = box[0].offsetWidth;\r\n        const boxHeight = box[0].offsetHeight;\r\n\r\n        box[0].style.transform = `translate(-${\r\n          boxWidth * (number - 1 - noOfColsNo * (rowNo.current - 1))\r\n        }px, -${boxHeight * (rowNo.current - 1)}px) scale(0.25, 0.35)`;\r\n      }\r\n    }\r\n\r\n    // finally stop displaying \"curtail\" element and let FRONTpage to be displayed by setting 'onTransEnd' prop to 'true'\r\n    else {\r\n      setTimeout(() => {\r\n        onRef.style.backgroundColor = \"transparent\";\r\n        onRef.style.opacity = \"0\";\r\n        onTransEnd(true);\r\n        onRef.style.display = \"none\";\r\n        setBricks([]);\r\n      }, boxAnimTimeNo);\r\n    }\r\n  };\r\n\r\n  // choose a random number without repeating\r\n  const randomWithoutRepeating = () => {\r\n    if (noOfAllBoxes.current > 0) {\r\n      let randomNo;\r\n\r\n      // check if a number of the row must be increased i.e. if all boxes from the current row have already been drawn or not yet\r\n      if ((n.current + 1) % noOfColsNo === 0) {\r\n        bricksInRow.current = [];\r\n        for (\r\n          let i = noOfColsNo * rowNo.current + 1;\r\n          i <= noOfColsNo * (rowNo.current + 1);\r\n          i++\r\n        ) {\r\n          bricksInRow.current.push(i);\r\n        }\r\n        arrLenght.current = bricksInRow.current.length;\r\n        rowNo.current++;\r\n        n.current = -1;\r\n      }\r\n      n.current++;\r\n\r\n      // random a number from a number equals the length of an array containing number of all boxes in the current row\r\n      const randomInd = Math.floor(Math.random() * arrLenght.current);\r\n\r\n      randomNo = bricksInRow.current[randomInd];\r\n\r\n      // po wylosowaniu danej liczby z bricksInRow przesuwamy go na koniec tablicy po czym usuwamy ten ostatni elemnt z tej tablicy\r\n      bricksInRow.current.splice(\r\n        randomInd,\r\n        1,\r\n        bricksInRow.current[arrLenght.current - 1]\r\n      );\r\n      bricksInRow.current.splice(-1, 1);\r\n\r\n      // shorten the arrLenght and noOfAllBoxes by 1\r\n      arrLenght.current--;\r\n      noOfAllBoxes.current--;\r\n\r\n      return randomNo;\r\n    } else {\r\n      clearInterval(boxIntervalIn.current);\r\n      clearInterval(boxIntervalOut.current);\r\n      return -1;\r\n    }\r\n  };\r\n\r\n  // start box disappear interval\r\n  const boxDisappear = () => {\r\n    boxIntervalOut.current = setInterval(() => {\r\n      randomBoxAppearOrDisappear(\"end\");\r\n    }, intervalTime.current / 3);\r\n  };\r\n\r\n  // chooseTitle - function dealing with putting words from \"TITLES\" array in the right box of curtail grid, with the right class adding a specific font color to each word or character\r\n  const chooseTitle = (rowN, ind) => {\r\n    let word, p;\r\n    switch (rowN) {\r\n      case 2:\r\n        if (ind === 1 || ind === 3) {\r\n          word = titles[0][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title pink\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 4) {\r\n          word = titles[0][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title yellow\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 2) {\r\n          word = titles[0][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title\">\r\n              {word}\r\n            </p>\r\n          );\r\n        }\r\n        return p;\r\n\r\n      case 4:\r\n        if (ind === 1 || ind === 3) {\r\n          word = titles[1][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title pink\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 4) {\r\n          word = titles[1][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title yellow\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 2) {\r\n          word = titles[1][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title\">\r\n              {word}\r\n            </p>\r\n          );\r\n        }\r\n        return p;\r\n\r\n      case 6:\r\n        if (ind === 1) {\r\n          word = titles[2][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title red\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 3) {\r\n          word = titles[2][ind - 1];\r\n\r\n          const spans = [...word].map((e, j) => {\r\n            if (j === 0 || j > 9) {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"white\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            } else {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"light-blue\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            }\r\n          });\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title\">\r\n              {spans}\r\n            </p>\r\n          );\r\n        } else if (ind === 2) {\r\n          word = titles[2][ind - 1];\r\n          const spans = [...word].map((e, j) => {\r\n            if (j === 0) {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"white\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            } else if (j === 2) {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"red\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            } else {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"green\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            }\r\n          });\r\n\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title\">\r\n              {spans}\r\n            </p>\r\n          );\r\n        } else if (ind === 4) {\r\n          word = titles[2][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title white\">\r\n              {word}\r\n            </p>\r\n          );\r\n        }\r\n        return p;\r\n\r\n      case 8:\r\n        if (ind === 2 || ind === 4) {\r\n          word = titles[3][ind - 2];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title pink\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 5) {\r\n          word = titles[3][ind - 2];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title yellow\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 3) {\r\n          word = titles[3][ind - 2];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title\">\r\n              {word}\r\n            </p>\r\n          );\r\n        }\r\n        return p;\r\n\r\n      case 10:\r\n        if (ind === 2 || ind === 4) {\r\n          word = titles[4][ind - 2];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title pink\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind >= 5 && ind < 6) {\r\n          word = titles[4][ind - 2];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title yellow\">\r\n              {word}\r\n            </p>\r\n          );\r\n        } else if (ind === 3) {\r\n          word = titles[4][ind - 2];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title\">\r\n              {word}\r\n            </p>\r\n          );\r\n        }\r\n        return p;\r\n\r\n      case 12:\r\n        if (ind === 2) {\r\n          word = titles[5][ind - 2];\r\n          p = <p className=\"start-title green\">{word}</p>;\r\n        } else if (ind === 3) {\r\n          word = titles[5][ind - 2];\r\n          const spans = [...word].map((e, j) => {\r\n            if (j === 0 || j > 6) {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"white\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            } else {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"light-blue\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            }\r\n          });\r\n          p = <p className=\"start-title\">{spans}</p>;\r\n        }\r\n        return p;\r\n\r\n      case 14:\r\n        if (ind === 2) {\r\n          word = titles[6][ind - 2];\r\n          p = <p className=\"start-title green\">{word}</p>;\r\n        } else if (ind === 3) {\r\n          word = titles[6][ind - 2];\r\n          const spans = [...word].map((e, j) => {\r\n            if (j === 0 || j > 10) {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"white\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            } else {\r\n              return (\r\n                <span key={\"s\" + rowN + ind + j} className=\"light-blue\">\r\n                  {e}\r\n                </span>\r\n              );\r\n            }\r\n          });\r\n          p = <p className=\"start-title\">{spans}</p>;\r\n        }\r\n        return p;\r\n\r\n      case 16:\r\n        if (ind === 1) {\r\n          word = titles[7][ind - 1];\r\n          p = (\r\n            <p key={\"p\" + rowN + ind} className=\"start-title white\">\r\n              {word}\r\n            </p>\r\n          );\r\n        }\r\n        return p;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const createBoxes = () => {\r\n    let brickBoxes = [];\r\n    if (!ifMobileOrMoz) {\r\n      brickBoxes = boxesArrNo.map((el, i) => {\r\n        return (\r\n          <div\r\n            key={i}\r\n            ref={addToBricksRef}\r\n            className={\"brick-box box-\" + el}\r\n          ></div>\r\n        );\r\n      });\r\n    } else {\r\n      let ind = 0;\r\n      brickBoxes = boxesArrNo.map((el, i) => {\r\n        const rowN = Math.floor(i / noOfColsNo);\r\n        if (i === noOfColsNo * rowN) {\r\n          ind = 0;\r\n        }\r\n        const resultTitle = chooseTitle(rowN, ind);\r\n        ind++;\r\n\r\n        return (\r\n          <div\r\n            key={i + 1}\r\n            ref={addToBricksRef}\r\n            className={\"brick-box-moz box-\" + el}\r\n          >\r\n            {resultTitle}\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n      setBricks(brickBoxes);\r\n    }, 25);\r\n  };\r\n\r\n  return <>{bricks.length > 0 ? bricks : null}</>;\r\n}\r\n\r\nexport default React.memo(BrickBoxes);\r\n"],"sourceRoot":""}